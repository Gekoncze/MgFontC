
#ifndef MGINT32ARRAY_H
#define MGINT32ARRAY_H

#include "mgtypes.h"

typedef struct MgInt32Array {
    Int32 count;
    int* array;
};

MgError mgInt32Array_init(MgInt32Array* array);
MgError mgInt32Array_deinit(MgInt32Array* array);
MgError mgInt32Array_resize(MgInt32Array* array, Int32 size);

#endif









#include "mgint32array.h"
#include "mgmemory.h"

#define MIN_COUNT 0
#define MAX_COUNT 1000000000

MgError mgInt32Array_init(MgInt32Array* array)
{
    array->count = 0;
    array->array = mgMemory_allocate(0);
    if(array->array == NULL) return -1;
    return 0;
}

MgError mgInt32Array_deinit(MgInt32Array* array)
{
    mgMemory_free(array->array);
    return 0;
}

MgError mgInt32Array_resize(MgInt32Array* array, Int32 count)
{
    if(count < MIN_COUNT) return -1;
    if(count > MAX_COUNT) return -1;
    void* data = mgMemory_resize(array->array, count*sizeof(Int32));
    if(data == NULL) return -1;
    array->array = data;
    array->count = count;
    return 0;
}